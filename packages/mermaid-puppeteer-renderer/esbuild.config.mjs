import esbuild from "esbuild";
import { nodeExternalsPlugin } from "esbuild-node-externals";
import { writeFileSync } from "fs";
import { writeFile } from "fs/promises";
import process from "process";

const mermaidRendererPlugin = {
	name: "mermaidRendererPlugin",
	setup(build) {
		build.onEnd(async () => {
			const result = await esbuild
				.build({
					entryPoints: ["src/mermaid_renderer.js"],
					bundle: true,
					format: "cjs",
					target: "chrome106",
					logLevel: "info",
					sourcemap: false,
					treeShaking: true,
					write: false,
					mainFields: ["module", "main"],
					minify: true,
				})
				.catch(() => process.exit(1));

			const fileContents = `
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <title>Mermaid Chart</title>
  </head>
  <body>
  	<div id="graphDiv"></div>
    <script type="text/javascript">
	${result.outputFiles[0].text}
	</script>
  </body>
</html>
			`;

			writeFile("./dist/mermaid_renderer.html", fileContents);
		});
	},
};

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";

const buildConfig = {
	banner: {
		js: banner,
	},
	entryPoints: ["src/index.ts"],
	bundle: true,
	format: "esm",
	target: "node16",
	platform: "node",
	logLevel: "info",
	sourcemap: true,
	treeShaking: false,
	outdir: "dist",
	mainFields: ["module", "main"],
	plugins: [mermaidRendererPlugin, nodeExternalsPlugin()],
	minify: false,
	metafile: true,
};

if (prod) {
	const buildResult = await esbuild.build(buildConfig);
	writeFileSync("./dist/meta.json", JSON.stringify(buildResult.metafile));
} else {
	const context = await esbuild.context(buildConfig);
	await context.watch();
}
